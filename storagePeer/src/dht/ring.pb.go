// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ring.proto

package dht

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetSuccReply struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	ID                   uint64   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSuccReply) Reset()         { *m = GetSuccReply{} }
func (m *GetSuccReply) String() string { return proto.CompactTextString(m) }
func (*GetSuccReply) ProtoMessage()    {}
func (*GetSuccReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{0}
}

func (m *GetSuccReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSuccReply.Unmarshal(m, b)
}
func (m *GetSuccReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSuccReply.Marshal(b, m, deterministic)
}
func (m *GetSuccReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuccReply.Merge(m, src)
}
func (m *GetSuccReply) XXX_Size() int {
	return xxx_messageInfo_GetSuccReply.Size(m)
}
func (m *GetSuccReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuccReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuccReply proto.InternalMessageInfo

func (m *GetSuccReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *GetSuccReply) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetSuccRequest struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSuccRequest) Reset()         { *m = GetSuccRequest{} }
func (m *GetSuccRequest) String() string { return proto.CompactTextString(m) }
func (*GetSuccRequest) ProtoMessage()    {}
func (*GetSuccRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{1}
}

func (m *GetSuccRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSuccRequest.Unmarshal(m, b)
}
func (m *GetSuccRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSuccRequest.Marshal(b, m, deterministic)
}
func (m *GetSuccRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuccRequest.Merge(m, src)
}
func (m *GetSuccRequest) XXX_Size() int {
	return xxx_messageInfo_GetSuccRequest.Size(m)
}
func (m *GetSuccRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuccRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuccRequest proto.InternalMessageInfo

func (m *GetSuccRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSuccReply)(nil), "dht.GetSuccReply")
	proto.RegisterType((*GetSuccRequest)(nil), "dht.GetSuccRequest")
}

func init() {
	proto.RegisterFile("ring.proto", fileDescriptor_26381ed67e202a6e)
}

var fileDescriptor_26381ed67e202a6e = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcc, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xc9, 0x28, 0x51, 0xd2, 0xe3, 0xe2, 0x71,
	0x4f, 0x2d, 0x09, 0x2e, 0x4d, 0x4e, 0x0e, 0x4a, 0x2d, 0xc8, 0xa9, 0x14, 0xe2, 0xe3, 0x62, 0xf2,
	0x0c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xf2, 0x0c, 0x00, 0xf3, 0x5d, 0x24, 0x98,
	0x14, 0x18, 0x35, 0x58, 0x82, 0x98, 0x3c, 0x5d, 0x94, 0x14, 0xb8, 0xf8, 0xe0, 0xea, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0xa0, 0x2a, 0x18, 0x61, 0x2a, 0x8c, 0x9c, 0xb8, 0xb8, 0x83, 0x32, 0xf3, 0xd2,
	0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x8c, 0xb9, 0xd8, 0xa1, 0x1a, 0x84, 0x84, 0xf5,
	0x52, 0x32, 0x4a, 0xf4, 0x50, 0xb5, 0x4b, 0x09, 0xa2, 0x0a, 0x16, 0xe4, 0x54, 0x2a, 0x31, 0x24,
	0xb1, 0x81, 0x5d, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x23, 0xa8, 0x4c, 0x97, 0xaf, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RingServiceClient is the client API for RingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RingServiceClient interface {
	GetSucc(ctx context.Context, in *GetSuccRequest, opts ...grpc.CallOption) (*GetSuccReply, error)
}

type ringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingServiceClient(cc grpc.ClientConnInterface) RingServiceClient {
	return &ringServiceClient{cc}
}

func (c *ringServiceClient) GetSucc(ctx context.Context, in *GetSuccRequest, opts ...grpc.CallOption) (*GetSuccReply, error) {
	out := new(GetSuccReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/GetSucc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingServiceServer is the server API for RingService service.
type RingServiceServer interface {
	GetSucc(context.Context, *GetSuccRequest) (*GetSuccReply, error)
}

// UnimplementedRingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRingServiceServer struct {
}

func (*UnimplementedRingServiceServer) GetSucc(ctx context.Context, req *GetSuccRequest) (*GetSuccReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSucc not implemented")
}

func RegisterRingServiceServer(s *grpc.Server, srv RingServiceServer) {
	s.RegisterService(&_RingService_serviceDesc, srv)
}

func _RingService_GetSucc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).GetSucc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/GetSucc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).GetSucc(ctx, req.(*GetSuccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dht.RingService",
	HandlerType: (*RingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSucc",
			Handler:    _RingService_GetSucc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ring.proto",
}
