// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ring.proto

package dht

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Requests
type GetNodeSuccRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeSuccRequest) Reset()         { *m = GetNodeSuccRequest{} }
func (m *GetNodeSuccRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeSuccRequest) ProtoMessage()    {}
func (*GetNodeSuccRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{0}
}

func (m *GetNodeSuccRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeSuccRequest.Unmarshal(m, b)
}
func (m *GetNodeSuccRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeSuccRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeSuccRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeSuccRequest.Merge(m, src)
}
func (m *GetNodeSuccRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeSuccRequest.Size(m)
}
func (m *GetNodeSuccRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeSuccRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeSuccRequest proto.InternalMessageInfo

type GetNodePredRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodePredRequest) Reset()         { *m = GetNodePredRequest{} }
func (m *GetNodePredRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodePredRequest) ProtoMessage()    {}
func (*GetNodePredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{1}
}

func (m *GetNodePredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodePredRequest.Unmarshal(m, b)
}
func (m *GetNodePredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodePredRequest.Marshal(b, m, deterministic)
}
func (m *GetNodePredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodePredRequest.Merge(m, src)
}
func (m *GetNodePredRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodePredRequest.Size(m)
}
func (m *GetNodePredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodePredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodePredRequest proto.InternalMessageInfo

type FindPredRequest struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindPredRequest) Reset()         { *m = FindPredRequest{} }
func (m *FindPredRequest) String() string { return proto.CompactTextString(m) }
func (*FindPredRequest) ProtoMessage()    {}
func (*FindPredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{2}
}

func (m *FindPredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindPredRequest.Unmarshal(m, b)
}
func (m *FindPredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindPredRequest.Marshal(b, m, deterministic)
}
func (m *FindPredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindPredRequest.Merge(m, src)
}
func (m *FindPredRequest) XXX_Size() int {
	return xxx_messageInfo_FindPredRequest.Size(m)
}
func (m *FindPredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindPredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindPredRequest proto.InternalMessageInfo

func (m *FindPredRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UpdatePredRequest struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePredRequest) Reset()         { *m = UpdatePredRequest{} }
func (m *UpdatePredRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePredRequest) ProtoMessage()    {}
func (*UpdatePredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{3}
}

func (m *UpdatePredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePredRequest.Unmarshal(m, b)
}
func (m *UpdatePredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePredRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePredRequest.Merge(m, src)
}
func (m *UpdatePredRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePredRequest.Size(m)
}
func (m *UpdatePredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePredRequest proto.InternalMessageInfo

func (m *UpdatePredRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type UpdateSuccRequest struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSuccRequest) Reset()         { *m = UpdateSuccRequest{} }
func (m *UpdateSuccRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSuccRequest) ProtoMessage()    {}
func (*UpdateSuccRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{4}
}

func (m *UpdateSuccRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSuccRequest.Unmarshal(m, b)
}
func (m *UpdateSuccRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSuccRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSuccRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSuccRequest.Merge(m, src)
}
func (m *UpdateSuccRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSuccRequest.Size(m)
}
func (m *UpdateSuccRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSuccRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSuccRequest proto.InternalMessageInfo

func (m *UpdateSuccRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type UpdateSpecificFingerRequest struct {
	FingID               int64    `protobuf:"varint,1,opt,name=FingID,proto3" json:"FingID,omitempty"`
	ID                   uint64   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	IP                   string   `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSpecificFingerRequest) Reset()         { *m = UpdateSpecificFingerRequest{} }
func (m *UpdateSpecificFingerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSpecificFingerRequest) ProtoMessage()    {}
func (*UpdateSpecificFingerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{5}
}

func (m *UpdateSpecificFingerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSpecificFingerRequest.Unmarshal(m, b)
}
func (m *UpdateSpecificFingerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSpecificFingerRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSpecificFingerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSpecificFingerRequest.Merge(m, src)
}
func (m *UpdateSpecificFingerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSpecificFingerRequest.Size(m)
}
func (m *UpdateSpecificFingerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSpecificFingerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSpecificFingerRequest proto.InternalMessageInfo

func (m *UpdateSpecificFingerRequest) GetFingID() int64 {
	if m != nil {
		return m.FingID
	}
	return 0
}

func (m *UpdateSpecificFingerRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateSpecificFingerRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type UpdateSuccListRequest struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSuccListRequest) Reset()         { *m = UpdateSuccListRequest{} }
func (m *UpdateSuccListRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSuccListRequest) ProtoMessage()    {}
func (*UpdateSuccListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{6}
}

func (m *UpdateSuccListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSuccListRequest.Unmarshal(m, b)
}
func (m *UpdateSuccListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSuccListRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSuccListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSuccListRequest.Merge(m, src)
}
func (m *UpdateSuccListRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSuccListRequest.Size(m)
}
func (m *UpdateSuccListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSuccListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSuccListRequest proto.InternalMessageInfo

func (m *UpdateSuccListRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type UpdateKeysInfoRequest struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateKeysInfoRequest) Reset()         { *m = UpdateKeysInfoRequest{} }
func (m *UpdateKeysInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateKeysInfoRequest) ProtoMessage()    {}
func (*UpdateKeysInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{7}
}

func (m *UpdateKeysInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateKeysInfoRequest.Unmarshal(m, b)
}
func (m *UpdateKeysInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateKeysInfoRequest.Marshal(b, m, deterministic)
}
func (m *UpdateKeysInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKeysInfoRequest.Merge(m, src)
}
func (m *UpdateKeysInfoRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateKeysInfoRequest.Size(m)
}
func (m *UpdateKeysInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKeysInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKeysInfoRequest proto.InternalMessageInfo

func (m *UpdateKeysInfoRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateKeysInfoRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type UpdateKeysRequest struct {
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateKeysRequest) Reset()         { *m = UpdateKeysRequest{} }
func (m *UpdateKeysRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateKeysRequest) ProtoMessage()    {}
func (*UpdateKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{8}
}

func (m *UpdateKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateKeysRequest.Unmarshal(m, b)
}
func (m *UpdateKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateKeysRequest.Marshal(b, m, deterministic)
}
func (m *UpdateKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKeysRequest.Merge(m, src)
}
func (m *UpdateKeysRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateKeysRequest.Size(m)
}
func (m *UpdateKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKeysRequest proto.InternalMessageInfo

func (m *UpdateKeysRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetKeysRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKeysRequest) Reset()         { *m = GetKeysRequest{} }
func (m *GetKeysRequest) String() string { return proto.CompactTextString(m) }
func (*GetKeysRequest) ProtoMessage()    {}
func (*GetKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{9}
}

func (m *GetKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetKeysRequest.Unmarshal(m, b)
}
func (m *GetKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetKeysRequest.Marshal(b, m, deterministic)
}
func (m *GetKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKeysRequest.Merge(m, src)
}
func (m *GetKeysRequest) XXX_Size() int {
	return xxx_messageInfo_GetKeysRequest.Size(m)
}
func (m *GetKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetKeysRequest proto.InternalMessageInfo

// Replies
type NodeReply struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	ID                   uint64   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReply) Reset()         { *m = NodeReply{} }
func (m *NodeReply) String() string { return proto.CompactTextString(m) }
func (*NodeReply) ProtoMessage()    {}
func (*NodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{10}
}

func (m *NodeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReply.Unmarshal(m, b)
}
func (m *NodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReply.Marshal(b, m, deterministic)
}
func (m *NodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReply.Merge(m, src)
}
func (m *NodeReply) XXX_Size() int {
	return xxx_messageInfo_NodeReply.Size(m)
}
func (m *NodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReply proto.InternalMessageInfo

func (m *NodeReply) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *NodeReply) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UpdateReply struct {
	OK                   bool     `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReply) Reset()         { *m = UpdateReply{} }
func (m *UpdateReply) String() string { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()    {}
func (*UpdateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{11}
}

func (m *UpdateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReply.Unmarshal(m, b)
}
func (m *UpdateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReply.Marshal(b, m, deterministic)
}
func (m *UpdateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReply.Merge(m, src)
}
func (m *UpdateReply) XXX_Size() int {
	return xxx_messageInfo_UpdateReply.Size(m)
}
func (m *UpdateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReply proto.InternalMessageInfo

func (m *UpdateReply) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type KeyReply struct {
	Keys                 []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyReply) Reset()         { *m = KeyReply{} }
func (m *KeyReply) String() string { return proto.CompactTextString(m) }
func (*KeyReply) ProtoMessage()    {}
func (*KeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_26381ed67e202a6e, []int{12}
}

func (m *KeyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyReply.Unmarshal(m, b)
}
func (m *KeyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyReply.Marshal(b, m, deterministic)
}
func (m *KeyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyReply.Merge(m, src)
}
func (m *KeyReply) XXX_Size() int {
	return xxx_messageInfo_KeyReply.Size(m)
}
func (m *KeyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyReply.DiscardUnknown(m)
}

var xxx_messageInfo_KeyReply proto.InternalMessageInfo

func (m *KeyReply) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNodeSuccRequest)(nil), "dht.GetNodeSuccRequest")
	proto.RegisterType((*GetNodePredRequest)(nil), "dht.GetNodePredRequest")
	proto.RegisterType((*FindPredRequest)(nil), "dht.FindPredRequest")
	proto.RegisterType((*UpdatePredRequest)(nil), "dht.UpdatePredRequest")
	proto.RegisterType((*UpdateSuccRequest)(nil), "dht.UpdateSuccRequest")
	proto.RegisterType((*UpdateSpecificFingerRequest)(nil), "dht.UpdateSpecificFingerRequest")
	proto.RegisterType((*UpdateSuccListRequest)(nil), "dht.UpdateSuccListRequest")
	proto.RegisterType((*UpdateKeysInfoRequest)(nil), "dht.UpdateKeysInfoRequest")
	proto.RegisterType((*UpdateKeysRequest)(nil), "dht.UpdateKeysRequest")
	proto.RegisterType((*GetKeysRequest)(nil), "dht.GetKeysRequest")
	proto.RegisterType((*NodeReply)(nil), "dht.NodeReply")
	proto.RegisterType((*UpdateReply)(nil), "dht.UpdateReply")
	proto.RegisterType((*KeyReply)(nil), "dht.KeyReply")
}

func init() {
	proto.RegisterFile("ring.proto", fileDescriptor_26381ed67e202a6e)
}

var fileDescriptor_26381ed67e202a6e = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xd1, 0xaa, 0xda, 0x40,
	0x10, 0x86, 0x35, 0x11, 0xab, 0x23, 0x4d, 0xed, 0xd6, 0x5a, 0xb1, 0xb4, 0xd8, 0xed, 0x85, 0x42,
	0xc1, 0x82, 0xbd, 0x29, 0xf4, 0xa2, 0xbd, 0x10, 0x25, 0x44, 0xaa, 0xac, 0xf8, 0x00, 0x6d, 0x32,
	0xea, 0xd2, 0x92, 0xe4, 0x24, 0xf1, 0x40, 0x1e, 0xfa, 0xbc, 0xc3, 0x21, 0x6b, 0xd6, 0x6c, 0xe2,
	0xea, 0x5d, 0x32, 0xfb, 0xff, 0xf3, 0xcf, 0x64, 0x3f, 0x02, 0x10, 0x71, 0xff, 0x30, 0x0d, 0xa3,
	0x20, 0x09, 0x88, 0xe9, 0x1d, 0x13, 0xda, 0x03, 0xb2, 0xc4, 0xe4, 0x77, 0xe0, 0xe1, 0xf6, 0xe4,
	0xba, 0x0c, 0x1f, 0x4e, 0x18, 0xab, 0xd5, 0x4d, 0x84, 0x9e, 0xac, 0x7e, 0x82, 0x57, 0x0b, 0xee,
	0x7b, 0x4a, 0x89, 0x58, 0x60, 0xd8, 0xf3, 0x41, 0x7d, 0x54, 0x9f, 0x34, 0x98, 0x61, 0xcf, 0xe9,
	0x67, 0x78, 0xbd, 0x0b, 0xbd, 0x3f, 0x09, 0x56, 0x45, 0x1b, 0x21, 0x6a, 0x33, 0xc3, 0xde, 0x14,
	0x22, 0x25, 0xf2, 0x4a, 0xb4, 0x83, 0xf7, 0xb9, 0x28, 0x44, 0x97, 0xef, 0xb9, 0xbb, 0xe0, 0xfe,
	0x01, 0x23, 0x29, 0xef, 0x43, 0x33, 0x2b, 0xe4, 0xe1, 0x26, 0xcb, 0xdf, 0xf2, 0x81, 0x0c, 0x39,
	0x50, 0xde, 0xd6, 0xbc, 0xb4, 0x1d, 0xc3, 0xdb, 0x22, 0x7b, 0xc5, 0xe3, 0xe4, 0x56, 0xfe, 0x0f,
	0x29, 0x74, 0x30, 0x8d, 0x6d, 0x7f, 0x1f, 0xdc, 0x58, 0x99, 0x10, 0x68, 0xfc, 0xc3, 0x34, 0x1e,
	0x18, 0x23, 0x73, 0xd2, 0x66, 0xe2, 0x99, 0x8e, 0xe5, 0x86, 0x99, 0x59, 0x1a, 0x75, 0xc2, 0x2e,
	0x58, 0x4b, 0x4c, 0x14, 0x15, 0xfd, 0x02, 0xed, 0xec, 0xbb, 0x33, 0x0c, 0xff, 0xa7, 0xd5, 0xa1,
	0xaa, 0xdb, 0xd1, 0x0f, 0xd0, 0x39, 0xe7, 0x5c, 0xe4, 0x6b, 0x47, 0xc8, 0x5b, 0xcc, 0x58, 0x3b,
	0xf4, 0x23, 0xb4, 0x1c, 0x4c, 0xcf, 0x67, 0x32, 0xbd, 0x5e, 0xa4, 0xcf, 0x9e, 0x1a, 0xd0, 0x61,
	0xdc, 0x3f, 0x6c, 0x31, 0x7a, 0xe4, 0x2e, 0x92, 0xef, 0xd0, 0x51, 0x60, 0x20, 0xef, 0xa6, 0xde,
	0x31, 0x99, 0x5e, 0xe3, 0x31, 0xb4, 0xc4, 0xc1, 0x65, 0x4c, 0x5a, 0x53, 0x9c, 0xd9, 0xc5, 0x97,
	0x9d, 0x0a, 0x0a, 0x1a, 0xe7, 0x0c, 0x5a, 0x12, 0x2a, 0xd2, 0x13, 0xa7, 0x15, 0xc6, 0x34, 0x9e,
	0x9f, 0x2a, 0x65, 0xe8, 0x62, 0x1c, 0x07, 0x11, 0xe9, 0x0b, 0xd9, 0x15, 0x7d, 0xc3, 0xae, 0x52,
	0x2f, 0xc6, 0x85, 0x82, 0x82, 0x92, 0x53, 0x5d, 0x53, 0xe7, 0x5c, 0x41, 0x4f, 0x87, 0x25, 0x19,
	0xa9, 0x3d, 0x74, 0xc4, 0x6a, 0xbb, 0xfd, 0x02, 0xab, 0x4c, 0x23, 0x19, 0x56, 0x66, 0x51, 0x10,
	0xbd, 0xbf, 0x49, 0xc6, 0x50, 0x69, 0x13, 0x05, 0xaa, 0xfb, 0xd9, 0x12, 0xf0, 0x52, 0x76, 0x85,
	0x7a, 0x6d, 0x87, 0xaf, 0xf0, 0x22, 0x87, 0x97, 0xbc, 0x91, 0x17, 0xae, 0xa6, 0xbe, 0x14, 0x45,
	0x49, 0x20, 0xad, 0xfd, 0x6d, 0x8a, 0x1f, 0xcf, 0xb7, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x2e, 0xcd, 0x93, 0x86, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RingServiceClient is the client API for RingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RingServiceClient interface {
	// These request return you succ and pred for specific nodes
	GetNodeSucc(ctx context.Context, in *GetNodeSuccRequest, opts ...grpc.CallOption) (*NodeReply, error)
	GetNodePred(ctx context.Context, in *GetNodePredRequest, opts ...grpc.CallOption) (*NodeReply, error)
	// These request return them for id's
	FindPred(ctx context.Context, in *FindPredRequest, opts ...grpc.CallOption) (*NodeReply, error)
	// Update neighbours data of a node
	UpdatePredecessor(ctx context.Context, in *UpdatePredRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	UpdateSucc(ctx context.Context, in *UpdateSuccRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	UpdateSpecificFinger(ctx context.Context, in *UpdateSpecificFingerRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	// Update succ list
	UpdateSuccList(ctx context.Context, in *UpdateSuccListRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	// Everything connected to key transfer
	UpdateKeys(ctx context.Context, in *UpdateKeysRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	UpdateKeysInfo(ctx context.Context, in *UpdateKeysInfoRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*KeyReply, error)
}

type ringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRingServiceClient(cc grpc.ClientConnInterface) RingServiceClient {
	return &ringServiceClient{cc}
}

func (c *ringServiceClient) GetNodeSucc(ctx context.Context, in *GetNodeSuccRequest, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/GetNodeSucc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) GetNodePred(ctx context.Context, in *GetNodePredRequest, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/GetNodePred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) FindPred(ctx context.Context, in *FindPredRequest, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/FindPred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdatePredecessor(ctx context.Context, in *UpdatePredRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdatePredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdateSucc(ctx context.Context, in *UpdateSuccRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdateSucc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdateSpecificFinger(ctx context.Context, in *UpdateSpecificFingerRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdateSpecificFinger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdateSuccList(ctx context.Context, in *UpdateSuccListRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdateSuccList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdateKeys(ctx context.Context, in *UpdateKeysRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) UpdateKeysInfo(ctx context.Context, in *UpdateKeysInfoRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/UpdateKeysInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringServiceClient) GetKeys(ctx context.Context, in *GetKeysRequest, opts ...grpc.CallOption) (*KeyReply, error) {
	out := new(KeyReply)
	err := c.cc.Invoke(ctx, "/dht.RingService/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RingServiceServer is the server API for RingService service.
type RingServiceServer interface {
	// These request return you succ and pred for specific nodes
	GetNodeSucc(context.Context, *GetNodeSuccRequest) (*NodeReply, error)
	GetNodePred(context.Context, *GetNodePredRequest) (*NodeReply, error)
	// These request return them for id's
	FindPred(context.Context, *FindPredRequest) (*NodeReply, error)
	// Update neighbours data of a node
	UpdatePredecessor(context.Context, *UpdatePredRequest) (*UpdateReply, error)
	UpdateSucc(context.Context, *UpdateSuccRequest) (*UpdateReply, error)
	UpdateSpecificFinger(context.Context, *UpdateSpecificFingerRequest) (*UpdateReply, error)
	// Update succ list
	UpdateSuccList(context.Context, *UpdateSuccListRequest) (*UpdateReply, error)
	// Everything connected to key transfer
	UpdateKeys(context.Context, *UpdateKeysRequest) (*UpdateReply, error)
	UpdateKeysInfo(context.Context, *UpdateKeysInfoRequest) (*UpdateReply, error)
	GetKeys(context.Context, *GetKeysRequest) (*KeyReply, error)
}

// UnimplementedRingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRingServiceServer struct {
}

func (*UnimplementedRingServiceServer) GetNodeSucc(ctx context.Context, req *GetNodeSuccRequest) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSucc not implemented")
}
func (*UnimplementedRingServiceServer) GetNodePred(ctx context.Context, req *GetNodePredRequest) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodePred not implemented")
}
func (*UnimplementedRingServiceServer) FindPred(ctx context.Context, req *FindPredRequest) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPred not implemented")
}
func (*UnimplementedRingServiceServer) UpdatePredecessor(ctx context.Context, req *UpdatePredRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredecessor not implemented")
}
func (*UnimplementedRingServiceServer) UpdateSucc(ctx context.Context, req *UpdateSuccRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSucc not implemented")
}
func (*UnimplementedRingServiceServer) UpdateSpecificFinger(ctx context.Context, req *UpdateSpecificFingerRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecificFinger not implemented")
}
func (*UnimplementedRingServiceServer) UpdateSuccList(ctx context.Context, req *UpdateSuccListRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuccList not implemented")
}
func (*UnimplementedRingServiceServer) UpdateKeys(ctx context.Context, req *UpdateKeysRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeys not implemented")
}
func (*UnimplementedRingServiceServer) UpdateKeysInfo(ctx context.Context, req *UpdateKeysInfoRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeysInfo not implemented")
}
func (*UnimplementedRingServiceServer) GetKeys(ctx context.Context, req *GetKeysRequest) (*KeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}

func RegisterRingServiceServer(s *grpc.Server, srv RingServiceServer) {
	s.RegisterService(&_RingService_serviceDesc, srv)
}

func _RingService_GetNodeSucc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSuccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).GetNodeSucc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/GetNodeSucc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).GetNodeSucc(ctx, req.(*GetNodeSuccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_GetNodePred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodePredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).GetNodePred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/GetNodePred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).GetNodePred(ctx, req.(*GetNodePredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_FindPred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).FindPred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/FindPred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).FindPred(ctx, req.(*FindPredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdatePredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdatePredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdatePredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdatePredecessor(ctx, req.(*UpdatePredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdateSucc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSuccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdateSucc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdateSucc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdateSucc(ctx, req.(*UpdateSuccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdateSpecificFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecificFingerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdateSpecificFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdateSpecificFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdateSpecificFinger(ctx, req.(*UpdateSpecificFingerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdateSuccList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSuccListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdateSuccList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdateSuccList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdateSuccList(ctx, req.(*UpdateSuccListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdateKeys(ctx, req.(*UpdateKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_UpdateKeysInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeysInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).UpdateKeysInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/UpdateKeysInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).UpdateKeysInfo(ctx, req.(*UpdateKeysInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RingService_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RingServiceServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.RingService/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RingServiceServer).GetKeys(ctx, req.(*GetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dht.RingService",
	HandlerType: (*RingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeSucc",
			Handler:    _RingService_GetNodeSucc_Handler,
		},
		{
			MethodName: "GetNodePred",
			Handler:    _RingService_GetNodePred_Handler,
		},
		{
			MethodName: "FindPred",
			Handler:    _RingService_FindPred_Handler,
		},
		{
			MethodName: "UpdatePredecessor",
			Handler:    _RingService_UpdatePredecessor_Handler,
		},
		{
			MethodName: "UpdateSucc",
			Handler:    _RingService_UpdateSucc_Handler,
		},
		{
			MethodName: "UpdateSpecificFinger",
			Handler:    _RingService_UpdateSpecificFinger_Handler,
		},
		{
			MethodName: "UpdateSuccList",
			Handler:    _RingService_UpdateSuccList_Handler,
		},
		{
			MethodName: "UpdateKeys",
			Handler:    _RingService_UpdateKeys_Handler,
		},
		{
			MethodName: "UpdateKeysInfo",
			Handler:    _RingService_UpdateKeysInfo_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _RingService_GetKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ring.proto",
}
