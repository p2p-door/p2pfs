// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingMessage struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{0}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type WriteRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{2}
}

func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (m *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(m, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WriteRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteReply struct {
	Written              int64    `protobuf:"varint,1,opt,name=Written,proto3" json:"Written,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteReply) Reset()         { *m = WriteReply{} }
func (m *WriteReply) String() string { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()    {}
func (*WriteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{3}
}

func (m *WriteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteReply.Unmarshal(m, b)
}
func (m *WriteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteReply.Marshal(b, m, deterministic)
}
func (m *WriteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteReply.Merge(m, src)
}
func (m *WriteReply) XXX_Size() int {
	return xxx_messageInfo_WriteReply.Size(m)
}
func (m *WriteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteReply.DiscardUnknown(m)
}

var xxx_messageInfo_WriteReply proto.InternalMessageInfo

func (m *WriteReply) GetWritten() int64 {
	if m != nil {
		return m.Written
	}
	return 0
}

type ReadRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ChunkSize            int64    `protobuf:"varint,2,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{4}
}

func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRequest.Unmarshal(m, b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return xxx_messageInfo_ReadRequest.Size(m)
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadRequest) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

type ReadReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Exists               bool     `protobuf:"varint,3,opt,name=Exists,proto3" json:"Exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadReply) Reset()         { *m = ReadReply{} }
func (m *ReadReply) String() string { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()    {}
func (*ReadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{5}
}

func (m *ReadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadReply.Unmarshal(m, b)
}
func (m *ReadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadReply.Marshal(b, m, deterministic)
}
func (m *ReadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadReply.Merge(m, src)
}
func (m *ReadReply) XXX_Size() int {
	return xxx_messageInfo_ReadReply.Size(m)
}
func (m *ReadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadReply proto.InternalMessageInfo

func (m *ReadReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadReply) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ReadReply) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type FindSuccRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindSuccRequest) Reset()         { *m = FindSuccRequest{} }
func (m *FindSuccRequest) String() string { return proto.CompactTextString(m) }
func (*FindSuccRequest) ProtoMessage()    {}
func (*FindSuccRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{6}
}

func (m *FindSuccRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindSuccRequest.Unmarshal(m, b)
}
func (m *FindSuccRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindSuccRequest.Marshal(b, m, deterministic)
}
func (m *FindSuccRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindSuccRequest.Merge(m, src)
}
func (m *FindSuccRequest) XXX_Size() int {
	return xxx_messageInfo_FindSuccRequest.Size(m)
}
func (m *FindSuccRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindSuccRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindSuccRequest proto.InternalMessageInfo

func (m *FindSuccRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FindSuccReply struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindSuccReply) Reset()         { *m = FindSuccReply{} }
func (m *FindSuccReply) String() string { return proto.CompactTextString(m) }
func (*FindSuccReply) ProtoMessage()    {}
func (*FindSuccReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_055ae5a865fc1c9e, []int{7}
}

func (m *FindSuccReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindSuccReply.Unmarshal(m, b)
}
func (m *FindSuccReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindSuccReply.Marshal(b, m, deterministic)
}
func (m *FindSuccReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindSuccReply.Merge(m, src)
}
func (m *FindSuccReply) XXX_Size() int {
	return xxx_messageInfo_FindSuccReply.Size(m)
}
func (m *FindSuccReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FindSuccReply.DiscardUnknown(m)
}

var xxx_messageInfo_FindSuccReply proto.InternalMessageInfo

func (m *FindSuccReply) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*PingMessage)(nil), "peer.PingMessage")
	proto.RegisterType((*Empty)(nil), "peer.Empty")
	proto.RegisterType((*WriteRequest)(nil), "peer.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "peer.WriteReply")
	proto.RegisterType((*ReadRequest)(nil), "peer.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "peer.ReadReply")
	proto.RegisterType((*FindSuccRequest)(nil), "peer.FindSuccRequest")
	proto.RegisterType((*FindSuccReply)(nil), "peer.FindSuccReply")
}

func init() {
	proto.RegisterFile("peer.proto", fileDescriptor_055ae5a865fc1c9e)
}

var fileDescriptor_055ae5a865fc1c9e = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0x65, 0x4b, 0x81, 0x1f, 0x03, 0x3f, 0xd0, 0x25, 0x9a, 0xa6, 0xd1, 0x88, 0x7b, 0x30, 0x9c,
	0x88, 0x7f, 0x12, 0xaf, 0x1e, 0x10, 0x13, 0x63, 0x14, 0xb2, 0x1c, 0x3c, 0x57, 0x3a, 0xc1, 0x0d,
	0x50, 0xd6, 0xee, 0x62, 0xc4, 0xef, 0xeb, 0xf7, 0x30, 0x3b, 0xd0, 0x50, 0x31, 0xf1, 0x36, 0xf3,
	0xfa, 0x66, 0xde, 0x9b, 0xd7, 0x05, 0xd0, 0x88, 0x69, 0x57, 0xa7, 0x0b, 0xbb, 0xe0, 0xbe, 0xab,
	0xc5, 0x31, 0xd4, 0x86, 0x2a, 0x99, 0x3c, 0xa2, 0x31, 0xd1, 0x04, 0x79, 0x03, 0xbc, 0xc1, 0x34,
	0x60, 0x6d, 0xd6, 0xf9, 0x27, 0xbd, 0xc1, 0x54, 0x54, 0xa0, 0xd4, 0x9f, 0x6b, 0xbb, 0x12, 0xd7,
	0x50, 0x7f, 0x4e, 0x95, 0x45, 0x89, 0x6f, 0x4b, 0x34, 0x96, 0x73, 0xf0, 0x9f, 0xa2, 0x39, 0x12,
	0xb5, 0x2a, 0xa9, 0x76, 0xd8, 0x6d, 0x64, 0xa3, 0xc0, 0x6b, 0xb3, 0x4e, 0x5d, 0x52, 0x2d, 0xce,
	0x00, 0x36, 0x73, 0x7a, 0xb6, 0xe2, 0x01, 0x54, 0x5c, 0x67, 0x31, 0xa1, 0xc1, 0xa2, 0xcc, 0x5a,
	0x71, 0x03, 0x35, 0x89, 0x51, 0xfc, 0xd7, 0xfa, 0x23, 0xa8, 0xf6, 0x5e, 0x97, 0xc9, 0x74, 0xa4,
	0x3e, 0x91, 0x34, 0x8a, 0x72, 0x0b, 0x88, 0x07, 0xa8, 0xae, 0x17, 0x38, 0x9d, 0xcc, 0x09, 0xdb,
	0x3a, 0x71, 0x58, 0x6e, 0x92, 0x6a, 0x7e, 0x08, 0xe5, 0xfe, 0x87, 0x32, 0xd6, 0x04, 0x45, 0x3a,
	0x79, 0xd3, 0x89, 0x53, 0x68, 0xde, 0xa9, 0x24, 0x1e, 0x2d, 0xc7, 0xe3, 0xcc, 0x51, 0x03, 0x3c,
	0x15, 0xd3, 0x42, 0x5f, 0x7a, 0x2a, 0x16, 0x27, 0xf0, 0x7f, 0x4b, 0x71, 0x9a, 0x8e, 0xa0, 0x37,
	0x86, 0x3d, 0xa5, 0x2f, 0xbf, 0x18, 0xd4, 0x86, 0x88, 0xe9, 0x08, 0xd3, 0x77, 0x35, 0x46, 0xde,
	0x05, 0xdf, 0x25, 0xcd, 0xf7, 0xbb, 0xf4, 0x13, 0x72, 0xa9, 0x87, 0xbf, 0x21, 0x51, 0xe0, 0x17,
	0x50, 0xa2, 0xe4, 0x38, 0x5f, 0x7f, 0xcd, 0xc7, 0x1f, 0xee, 0xfd, 0xc0, 0xf4, 0x6c, 0x25, 0x0a,
	0x1d, 0xe6, 0x24, 0x5c, 0x06, 0x99, 0x44, 0x2e, 0xd0, 0xb0, 0x99, 0x87, 0x88, 0x7f, 0xce, 0x78,
	0x0f, 0x5a, 0xd9, 0x0d, 0x68, 0xcc, 0x22, 0xbd, 0x4f, 0xa4, 0x73, 0x78, 0xb0, 0xe6, 0xee, 0x24,
	0x10, 0xb6, 0x76, 0x61, 0x5a, 0xf3, 0x52, 0xa6, 0xe7, 0x74, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x5c, 0xb7, 0x5a, 0xdc, 0x5c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerServiceClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (PeerService_WriteClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (PeerService_ReadClient, error)
	FindSuccessorInRing(ctx context.Context, in *FindSuccRequest, opts ...grpc.CallOption) (*FindSuccReply, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/peer.PeerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (PeerService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerService_serviceDesc.Streams[0], "/peer.PeerService/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceWriteClient{stream}
	return x, nil
}

type PeerService_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*WriteReply, error)
	grpc.ClientStream
}

type peerServiceWriteClient struct {
	grpc.ClientStream
}

func (x *peerServiceWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerServiceWriteClient) CloseAndRecv() (*WriteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (PeerService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerService_serviceDesc.Streams[1], "/peer.PeerService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerService_ReadClient interface {
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type peerServiceReadClient struct {
	grpc.ClientStream
}

func (x *peerServiceReadClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerServiceClient) FindSuccessorInRing(ctx context.Context, in *FindSuccRequest, opts ...grpc.CallOption) (*FindSuccReply, error) {
	out := new(FindSuccReply)
	err := c.cc.Invoke(ctx, "/peer.PeerService/FindSuccessorInRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
type PeerServiceServer interface {
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	Write(PeerService_WriteServer) error
	Read(*ReadRequest, PeerService_ReadServer) error
	FindSuccessorInRing(context.Context, *FindSuccRequest) (*FindSuccReply, error)
}

// UnimplementedPeerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (*UnimplementedPeerServiceServer) Ping(ctx context.Context, req *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPeerServiceServer) Write(srv PeerService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedPeerServiceServer) Read(req *ReadRequest, srv PeerService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedPeerServiceServer) FindSuccessorInRing(ctx context.Context, req *FindSuccRequest) (*FindSuccReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessorInRing not implemented")
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServiceServer).Write(&peerServiceWriteServer{stream})
}

type PeerService_WriteServer interface {
	SendAndClose(*WriteReply) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type peerServiceWriteServer struct {
	grpc.ServerStream
}

func (x *peerServiceWriteServer) SendAndClose(m *WriteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerServiceWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PeerService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServiceServer).Read(m, &peerServiceReadServer{stream})
}

type PeerService_ReadServer interface {
	Send(*ReadReply) error
	grpc.ServerStream
}

type peerServiceReadServer struct {
	grpc.ServerStream
}

func (x *peerServiceReadServer) Send(m *ReadReply) error {
	return x.ServerStream.SendMsg(m)
}

func _PeerService_FindSuccessorInRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).FindSuccessorInRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/FindSuccessorInRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).FindSuccessorInRing(ctx, req.(*FindSuccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PeerService_Ping_Handler,
		},
		{
			MethodName: "FindSuccessorInRing",
			Handler:    _PeerService_FindSuccessorInRing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _PeerService_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _PeerService_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer.proto",
}
